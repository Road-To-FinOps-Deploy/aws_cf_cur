AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template that builds CUR 
Parameters:
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information. This name will be combined with account id
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  Compression:
    Type: String
    Default: "Parquet"
  Format:
    Type: String
    Default: "Parquet"
  ReportName:
    Type: String
    Default: "AWS-Cost-and-Usage-Report"
  TimeUnit:
    Type: String
    Default: "HOURLY" 
    AllowedValues:
      - "HOURLY" 
      - "DAILY"
      - "MONTHLY"
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - EventPermission
    Properties:
      BucketName:
        !Sub "${DestinationBucket}${AWS::AccountId}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloudformation_deploy_cur"
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .yaml
  CURBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetBucketAcl'
              - 's3:GetBucketPolicy'
            Effect: Allow
            Resource: !GetAtt S3Bucket.Arn 
            Principal: {"Service": "billingreports.amazonaws.com"}
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Sub "${S3Bucket.Arn}/*"
            Principal: {"Service": "billingreports.amazonaws.com"}
  ReportDefinition:
    DependsOn:
      -  S3Bucket
    Type: AWS::CUR::ReportDefinition
    Properties: 
      Compression: !Ref Compression
      Format: !Ref Format
      RefreshClosedReports: "True"
      ReportName: !Ref ReportName
      ReportVersioning: "CREATE_NEW_REPORT"
      S3Bucket: !Ref S3Bucket
      S3Prefix: "cur-report"
      S3Region: "us-east-1"
      TimeUnit: !Ref TimeUnit
      AdditionalSchemaElements: 
        - RESOURCES
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cloudformation_deploy_cur
      Description: LambdaFunction to retreive list of organization
      Runtime: python3.8
      Code:
        ZipFile: |
          #!/usr/bin/env python3
          import boto3
          import botocore
          import os

          def lambda_handler(event, context):
              client = boto3.client('cloudformation')

              S3BucketName    = os.environ['BUCKET_NAME']
              Region = os.environ['REGION']
              ReportName = os.environ['REPORTNAME']

              response = client.create_stack(
              StackName='Crawler',
              TemplateURL=f"https://s3-{Region}.amazonaws.com/{S3BucketName}/cur-report/{ReportName}/crawler-cfn.yml",
              Capabilities=[
                  'CAPABILITY_IAM'
              ]
              )
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 600
      Role:
        Fn::GetAtt:
          - LambdaIAMRole
          - Arn
      Environment:
        Variables:
          BUCKET_NAME:
            !Sub "${DestinationBucket}${AWS::AccountId}"
          REGION:
            AWS::Region
          REPORTNAME:
            !Ref ReportName
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${DestinationBucket}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - "glue:StartCrawler"
                Resource: '*'
  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub "arn:aws:s3:::${DestinationBucket}${AWS::AccountId}"